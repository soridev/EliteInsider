@page "/fullclears/dashboard"
@attribute [Authorize]

@using EliteInsider.Models;
@using EliteInsider.Models.Converters;
@using EliteInsider.Data;
@using Plotly.Blazor.Traces.ScatterLib;
@using Plotly.Blazor.LayoutLib;
@using System.Diagnostics;

@inject IRaidLogService LogService;

<PageTitle>Fullclears</PageTitle>

<h1>Fullclears</h1>

<p>This page lets you inspect data about the guilds fullclears</p>


<MudContainer Class="mt-3 px-8" MaxWidth="MaxWidth.False">
    <MudGrid>
        <!-- Row one with week selector. -->
        <MudItem xs="3">
            <MudAutocomplete T="GuildWeek" Label="Year and Week" @bind-Value="currentValue" SearchFunc="@Search1"
                             CoerceText="@coerceText" CoerceValue="@coerceValue" MaxItems="null" ResetValueOnEmptyText="true" Strict="false" />
        </MudItem>        
        <MudItem xs="2">
            <MudButton Variant="Variant.Filled" ButtonType="ButtonType.Button" Color="@Color.Primary" OnClick="UpdateChartClick" Style="margin-top: 15px;">Update Charts</MudButton>
        </MudItem>
        <MudItem xs="12"></MudItem>

        <!-- Row two with KPI data. -->
        <MudItem xs="12" sm="6" md="4">
            <MudPaper Elevation="2" Class="pa-4">
                <MudText Typo="Typo.h6" Align="Align.Center">Total Clear Time</MudText>
                <MudText Typo="Typo.body1" Color="Color.Tertiary" Align="Align.Center">2 hours 45 minutes</MudText>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="6" md="4">
            <MudPaper Elevation="2" Class="pa-4">
                <MudText Typo="Typo.h6" Align="Align.Center">Compared to last clear</MudText>
                <MudText Typo="Typo.body1" Color="Color.Secondary" Align="Align.Center">+ 11 minutes</MudText>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="12" md="4">
            <MudPaper Elevation="2" Class="pa-4">
                <MudText Typo="Typo.h6" Align="Align.Center">New personal best?</MudText>
                <MudText Typo="Typo.body1" Color="Color.Secondary" Align="Align.Center">No</MudText>
            </MudPaper>
        </MudItem>

        <!-- Row 3 with fullclear section chart. -->
        <MudItem xs="12">
            <PlotlyChart class="mud-elevation-2" @bind-Config="fcLineconfig" @bind-Layout="fcLinelayout" @bind-Data="fcLineData" @ref="fcLineChart"
                ClickAction="TimeSegmentClicked" AfterRender="async () => await SubscribeEvents()" />
        </MudItem>

        <!-- Row 4 with wing duration bar chart. -->
        <MudItem xs="12" sm="4">
            <MudGrid>
                <MudItem xs="12">
                    <MudPaper Elevation="2" Class="pa-4" Style="height: 238px;">
                        <MudText Typo="Typo.h6" Align="Align.Center">DPS Ranking</MudText>
                        <MudSimpleTable Dense="true" Style="overflow-x: auto;" Bordered="true">
                            <thead>
                                <th>Rank</th>
                                <th>Account Name</th>
                                <th>AVG DPS</th>
                            </thead>
                            <tbody>
                                <tr>
                                    <td>1</td>
                                    <td>Daxxed.1234</td>
                                    <td>21.325</td>
                                </tr>
                                <tr>
                                    <td>2</td>
                                    <td>Daxxed.1234</td>
                                    <td>21.325</td>
                                </tr>
                                <tr>
                                    <td>3</td>
                                    <td>Daxxed.1234</td>
                                    <td>21.325</td>
                                </tr>
                            </tbody>
                        </MudSimpleTable>
                    </MudPaper>
                </MudItem>
                <MudItem xs="12">
                    <MudPaper Elevation="2" Class="pa-4" Style="height: 238px;">
                        <MudText Typo="Typo.h6" Align="Align.Center">Dont know yet</MudText>
                    </MudPaper>
                </MudItem>
            </MudGrid>
        </MudItem>
        <MudItem xs="12" sm="8">
            <div class="mud-elevation-2">
                <MudCarousel Class="mud-width-full" ShowArrows="true" ShowBullets="true" EnableSwipeGesture="true" TData="object" Style="height: 500px;" AutoCycle="false">
                    <MudCarouselItem Transition="transition">
                        <PlotlyChart @bind-Config="fcBarConfig" @bind-Layout="fcBarLayout" @bind-Data="fcBarData" @ref="fcBarChart" />
                    </MudCarouselItem>
                    <MudCarouselItem Transition="transition">
                        <PlotlyChart @bind-Config="fcBarConfig" @bind-Layout="fcBarLayout" @bind-Data="fcBarData" @ref="fcBarChart" />
                    </MudCarouselItem>
                </MudCarousel>
            </div>
        </MudItem>        
    </MudGrid>
</MudContainer>
<MudSpacer></MudSpacer>

<MudScrollToTop>
    <MudFab Color="Color.Tertiary" StartIcon="@Icons.Material.Filled.ArrowCircleUp" />
</MudScrollToTop>

@code {
    // dropdown config
    private bool resetValueOnEmptyText;
    private bool coerceText;
    private bool coerceValue;
    private GuildWeek currentValue;
    private List<GuildWeek> guildWeeks = new List<GuildWeek>();
    private MudBlazor.Transition transition = MudBlazor.Transition.Slide;

    // plotly fc line-chart config
    PlotlyChart fcLineChart = new PlotlyChart();
    Config fcLineconfig = new Config() { Responsive = true };
    Layout fcLinelayout = new Layout()
    {
        AutoSize = true,
        XAxis = new List<XAxis>() { new XAxis() { Color = "#ffffff"} },
        YAxis = new List<YAxis>() { new YAxis() { ShowTickLabels = false, Color = "#ffffff" } },
        Font = new Font() { Color = "#ffffff" },
        PaperBgColor = "#373740",
        PlotBgColor = "#373740",
        Title = new Title() { Text = "Fullclear time sections" }
    };
    IList<ITrace> fcLineData = new List<ITrace>();

    // plotly fc bar-chart config
    PlotlyChart fcBarChart = new PlotlyChart();
    Config fcBarConfig = new Config() { Responsive = true };
    Layout fcBarLayout = new Layout()
    {
        AutoSize = true,
        ShowLegend = true,
        XAxis = new List<XAxis>() { new XAxis() { Color = "#ffffff"} },
        YAxis = new List<YAxis>() { new YAxis() { Color = "#ffffff", Title = new Plotly.Blazor.LayoutLib.YAxisLib.Title() { Text = "Duration in Minutes" }}},
        Font = new Font() { Color = "#ffffff" },
        PaperBgColor = "#373740",
        PlotBgColor = "#373740",
        Title = new Title() { Text = "Total duration per wing" }
    };
    IList<ITrace> fcBarData = new List<ITrace>();

    // fullclear data
    List<GuildKillTime> gkts = new List<GuildKillTime>();

    // load guild-weeks from backend service.
    protected override async Task OnInitializedAsync()
    {
        guildWeeks = await LogService.GetGuildClearWeeksAsync("ZETA");
        if(guildWeeks.Count > 0)
        {
            currentValue = guildWeeks.First();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await UpdateChartClick();
        }
    }

    // generic search function.
    private async Task<IEnumerable<GuildWeek>> Search1(string value)
    {
        // In real life use an asynchronous function for fetching data from an api.
        await Task.Delay(5);

        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
            return guildWeeks;
        return guildWeeks.Where(x => x.YearWeek.ToString().Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private async Task UpdateChartClick()
    {
        if(currentValue != null)
        {
            await FetchFullclearData(currentValue);
            await refreshGraphs();            
        }
    }

    public async Task FetchFullclearData(GuildWeek guildweek)
    {
        gkts = await LogService.GetFullclearDataAsync(guildweek);
    }

    public void TimeSegmentClicked(object value, object label)
    {
        Debug.WriteLine(label.ToString());
        Debug.WriteLine(value.ToString());
    }

    public async Task SubscribeEvents()
    {
        await fcLineChart.SubscribeClickEvent();
    }

    public async Task refreshGraphs()
    {        
        // update the data for the fc time section line-chart.
        IList<ITrace> data = new List<ITrace>();

        foreach(var item in gkts)
        {
            var timediff = item.EndTime - item.StartTime;
            data.Add(new Scatter{
                    Name = item.EncounterName,
                    Mode = ModeFlag.Lines,
                    X = new List<object>(){item.StartTime, item.EndTime},
                    Y = new List<object>() { 10, 10 },
                    Line = new Line() { Width = 25 },
                    Text = $"{timediff.Minutes}m {timediff.Seconds}s"
            });
        }

        fcLineData = data;

        // update the data for the fc wing performance bar chart
        data = new List<ITrace>();
        Dictionary<int, DateTime> WingStartTimes = new Dictionary<int, DateTime>();
        Dictionary<int, DateTime> WingEndTimes = new Dictionary<int, DateTime>();
        Dictionary<int, string> WingNames = new Dictionary<int, string>();

        foreach(var item in gkts)
        {
            // check start-times
            if(WingStartTimes.Keys.Contains(item.RaidWing)){
                if (WingStartTimes[item.RaidWing] > item.StartTime)
                {
                    WingStartTimes[item.RaidWing] = item.StartTime;
                }
            }
            else
            {
                WingStartTimes.Add(item.RaidWing, item.StartTime);
            }

            // check end-times
            if (WingEndTimes.Keys.Contains(item.RaidWing))
            {
                if(WingEndTimes[item.RaidWing] < item.EndTime)
                {
                    WingEndTimes[item.RaidWing] = item.EndTime;
                }
            }
            else {
                WingEndTimes.Add(item.RaidWing, item.EndTime);
            }

            // check wingnames
            if (!WingNames.Keys.Contains(item.RaidWing))
            {
                WingNames.Add(item.RaidWing, item.WingName);
            }
        }

        foreach(var item in WingStartTimes.Keys)
        {
            double totalTime = Math.Round((WingEndTimes[item] - WingStartTimes[item]).TotalMinutes, 2);

            data.Add(new Bar()
                {
                    X = new List<object> { WingNames[item] },
                    Y = new List<object> { totalTime },
                    Name = WingNames[item],
                    Text = $"{totalTime.ToString()}min."
            });
        }

        fcBarData = data;

        StateHasChanged();
        await fcLineChart.React();
        await fcBarChart.React();
    }
}
