@page "/logregistry"
@attribute [Authorize]
@using EliteInsider.Models
@using EliteInsider.Data
@using System.Net.Http.Json
@inject IRaidLogService RLService

<PageTitle>Log Registry</PageTitle>

<h1>Log Registry</h1>

<p>This page shows all uploaded and parsed logs that are registered in the database.</p>

<MudDataGrid T="RaidKillTime" Items="@RaidKillTimes" SortMode="SortMode.Multiple" Filterable="true" QuickFilter="@_quickFilter"
    Hideable="true">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Raid Kill-Times</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
            AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <Columns>
        <PropertyColumn Property="x => x.EncounterName" Title="Encounter Name" Sortable="true" Filterable="true"/>
        <PropertyColumn Property="x => x.QualifyingDate" Title="Qualifying Date" Sortable="true" Filterable="true" />
        <PropertyColumn Property="x => x.StartTime" Title="Start Time" Sortable="true"/>
        <PropertyColumn Property="x => x.EndTime" Title="End Time"/>
        <PropertyColumn Property="x => x.Success" Title="Success?" Sortable="true" Filterable="true" />
        <PropertyColumn Property="x => x.CM" Title="CM?" Sortable="true" Filterable="true" />
        <TemplateColumn>
            <CellTemplate>
                <MudLink Target="_blank" Href="@context.Item.LinkToUpload">@context.Item.LinkToUpload</MudLink>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <PagerContent>
        <MudDataGridPager T="RaidKillTime" />
    </PagerContent>
</MudDataGrid>

@code {
    private IEnumerable<RaidKillTime> RaidKillTimes = new List<RaidKillTime>();
    private HashSet<RaidKillTime> selectedItems = new HashSet<RaidKillTime>();
    private string _searchString;
    private bool _sortNameByLength;
    private List<string> _events = new();

    // custom sort by name length
    private Func<RaidKillTime, object> _sortBy => x =>
    {
        if (_sortNameByLength)
            return x.EncounterName.Length;
        else
            return x.EncounterName;
    };
    // quick filter - filter gobally across multiple columns with the same input
    private Func<RaidKillTime, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;
        if (x.EncounterName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (x.QualifyingDate.ToString().Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    };

    protected override async Task OnInitializedAsync()
    {
        RaidKillTimes = await RLService.GetRaidKillTimesAsync();
    }
}
